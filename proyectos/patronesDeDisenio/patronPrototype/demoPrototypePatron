// Ejemplo de patron de disenio tipo prototype para cualquier lenguaje de programacion (es una tecnica) que te permite crear un objeto o clonar a partir de otro ya iniciado

// Este ejemplo se realiza con una conexion o prototipo de conexion que puedes reutilizar para otras conexiones.

class ConexionDBPrototype {
  constructor(proto) {
    //Recibe el prototipo a iniciarce
    this.proto = proto;
    return this.clone();
  }

  clone() {
    let connection = new Connection();
    connection.driver = this.proto.driver;
    connection.server = this.proto.server;
    connection.database = this.proto.database;
    connection.user = this.proto.user;
    connection.password = this.proto.password;

    return connection;
  }
}

class Connection {
  constructor(driver, server, database, user, password) {
    // Recibe los elementos comunmente utilizados en una conexion a DB.

    // asigna los argumentos
    this.driver = driver;
    this.server = server;
    this.database = database;
    this.user = user;
    this.password = password;
  }

  //creando la cadena de conexion y retornandola.
  getConnection() {
    return (
      this.driver +
      "://server=" +
      this.server +
      ";database=" +
      this.database +
      ";user=" +
      this.user +
      ";password=" +
      this.password
    );
  }
}

// creando primer prototipo pasandole los argumentos de la conexion
let connectionSQLServerPrototype = new Connection(
  "sqlserver",
  "localhost",
  "beerDB",
  "sa",
  "123456"
);

// clonando nuestro prototipo
let connectionSQLServer = new ConexionDBPrototype(connectionSQLServerPrototype);

console.log(connectionSQLServerPrototype);
console.log(connectionSQLServer);

//Modifico connectionSQLServer en un valor para demostrar que la clonacion es independiente en cada objeto.

console.log("-----------------------------------------------");

connectionSQLServer.driver = "SQL";
console.log(connectionSQLServerPrototype);
console.log(connectionSQLServer);

// creando un clone para otra ConexionDBPrototype, ahora a MySQL
let connectionMySQLPrototype = new Connection(
  "MySQL",
  "localhost",
  "mysql",
  "root",
  "123456"
);
let connectionMySQL = new ConexionDBPrototype(connectionMySQLPrototype);

console.log("------------------------------------------------");

console.log(connectionMySQL);

console.log("---------------------------------------------------");

// aca usaremos es spread operation de json, solo para demostrar que no es lo mismo ya que un clone crea una copia en memoria mientras que spread es un apuntador que se ve afectado por el objeto del que se clona

let miClon = { ...connectionMySQL };
console.log(miClon);
